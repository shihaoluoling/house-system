package com.example.user.center.controller;

import com.alibaba.fastjson.JSONObject;
import com.example.user.center.dao.HouseExploitMapper;
import com.example.user.center.model.*;
import com.house.utils.response.handler.ResponseEntity;
import com.house.utils.response.handler.ResponseUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * @author shihao
 * @Title: ExploitController
 * @ProjectName Second-order-center
 * @Description: 开发管理
 * @date Created in
 * @Version: $
 */
@CrossOrigin
@RestController
@RequestMapping("/Exploit")
@Api
public class ExploitController {
    @Autowired
    private HouseExploitMapper houseExploitMapper;
    @ApiOperation(value = "新建开发", notes = "新建开发")
    @RequestMapping(value = "/addExploit", method = RequestMethod.POST)
    @Transactional(rollbackFor = {RuntimeException.class, Error.class})
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "exploitName", value = "开发商名称", required = true, type = "String"),
    })
    public ResponseEntity<JSONObject> addTower(String exploitName) throws Exception {
        ResponseEntity.BodyBuilder builder = ResponseUtils.getBodyBuilder(HttpStatus.OK);
        HouseExploit houseExploit = new HouseExploit();
        houseExploit.setIsDeleted((short) 0);
        houseExploit.setExploitName(exploitName);
        houseExploit.setCreateTime(LocalDateTime.now());
        houseExploit.setCreateTime(LocalDateTime.now());
        houseExploitMapper.insertSelective(houseExploit);
        return builder.body(ResponseUtils.getResponseBody(0));
    }
    @ApiOperation(value = "修改开发", notes = "修改开发")
    @RequestMapping(value = "/updateExploit", method = RequestMethod.POST)
    @Transactional(rollbackFor = {RuntimeException.class, Error.class})
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "exploitName", value = "开发商名称", required = true, type = "String"),
    })
    public ResponseEntity<JSONObject> updateExploit(Integer id,String exploitName) throws Exception {
        ResponseEntity.BodyBuilder builder = ResponseUtils.getBodyBuilder(HttpStatus.OK);
        HouseExploit houseExploit = new HouseExploit();
        houseExploit.setId(id);
        houseExploit.setExploitName(exploitName);
        houseExploit.setCreateTime(LocalDateTime.now());
        houseExploitMapper.updateByPrimaryKeySelective(houseExploit);
        return builder.body(ResponseUtils.getResponseBody(0));
    }
    @ApiOperation(value = "删除开发", notes = "删除开发")
    @RequestMapping(value = "/deletedExploit", method = RequestMethod.POST)
    @Transactional(rollbackFor = {RuntimeException.class, Error.class})
    public ResponseEntity<JSONObject> deletedExploit(Integer id) throws Exception {
        ResponseEntity.BodyBuilder builder = ResponseUtils.getBodyBuilder(HttpStatus.OK);
        HouseExploit houseExploit = new HouseExploit();
        houseExploit.setId(id);
        houseExploit.setCreateTime(LocalDateTime.now());
        houseExploit.setIsDeleted((short) 1);
        houseExploitMapper.updateByPrimaryKeySelective(houseExploit);
        return builder.body(ResponseUtils.getResponseBody(0));
    }
    @ApiOperation(value = "查询开发", notes = "查询开发")
    @RequestMapping(value = "/selectExploit", method = RequestMethod.POST)
    @Transactional(rollbackFor = {RuntimeException.class, Error.class})
    public ResponseEntity<JSONObject> selectExploit() throws Exception {
        ResponseEntity.BodyBuilder builder = ResponseUtils.getBodyBuilder(HttpStatus.OK);
        HouseExploitExample houseExploitExample =  new HouseExploitExample();
        houseExploitExample.createCriteria().andIsDeletedEqualTo((short) 0);

        return builder.body(ResponseUtils.getResponseBody(houseExploitMapper.selectByExample(houseExploitExample)));
    }
}
